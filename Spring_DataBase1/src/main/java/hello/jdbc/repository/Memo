 V0
/**
 * 1.  커넥션 연결: 주로 TCP/IP를 사용해서 커넥션을 연결한다.
 * 2.  SQL 전달: 애플리케이션 서버는 DB가 이해할 수 있는 SQL을 연결된 커넥션을 통해 DB에 전달한다.
 * 3.  결과 응답: DB는 전달된 SQL을 수행하고 그 결과를 응답한다. 애플리케이션서버는 응답 결과를 활용한다
 */

V0
*드라이버 매니저를 통해 직접 커넥션을 획득한다.
    DriverManager.getConnection(URL, USERNAME, PASSWORD);

*Connection con, Statement stmt, ResultSet rs를 직접 닫는다.
    rs.close(), stmt.close(), con.close()

V1
 * DataSource를 통해서 커넥션을 획득한다
 Connection con = dataSource.getConnection();

V2 트랜잭션을 사용한다. 커넥션을 파라미터로 전달받는 메서드를 추가한다
    트랜잭션을 사용하려면 같은 커넥션을 유지해야하기 때문에 비지니스 로직이 있는 서비스 계층에서 시작해야한다.
    결과적으로 서비스계층에서 커넥션 생성을 하고 트랜잭션 시작과 커밋/롤백, 커넥션 종료까지 해야한다

    한계: 서비스 계층이 JDBC 기술에 의존한다

V3
Connection con = DataSourceUtils.getConnection(dataSource);
트랜잭션 동기화 매니저가 관리하는 커넥션이 있으면 해당 커넥션을 반환한다.
트랜잭션 동기화 매니저가 관리하는 커넥션이 없는 경우 새로운 커넥션을 생성해서 반환한다.

JdbcUtils.closeResultSet(rs);
JdbcUtils.closeStatement(stmt);
DataSourceUtils.releaseConnection(con, dataSource);

트랜잭션을 사용하기 위해 동기화된 커넥션은 커넥션을 닫지 않고 그대로 유지해준다.
트랜잭션 동기화 매니저가 관리하는 커넥션이 없는 경우 해당 커넥션을 닫는다

V4 예외 누수 해결. SQLExeption -> RunTimeExeption